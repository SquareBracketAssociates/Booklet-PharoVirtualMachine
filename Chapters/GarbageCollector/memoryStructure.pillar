!!Memory Structure and Garbage Collection

!!!Memory Structure

The memory map maintained by the VM is depicted on Figure *@memoryMap*.

+Memory Map>figures/memoryMap.pdf|width=100|label=memoryMap+

The Stack (both Pharo and C) resides in the lower address of the memory.
This is the stack used by the C Code and also the stack pages are allocated in this stack.
All the execution of a process stores the information in the stack.
The stack is the real representation of the contexts in the image. 
The frames are in a sequence, in the stack. 
Each frame knows the calling frame with a pointer. 
Objects referenced into stack frames are retained i.e. never garbage collected.

The young space (also called new space) is used by the VM to create objects and manage short-life objects.
The old space contains objects that survived longer. 

Statistics shows that new objects die faster than older ones, therefore many objects will be discarded fastly.
This is why the Pharo VM uses two different Garbage Collectors (GCs).
The ""Scavenger"" (a copy garbage collector) manages objects allocated into the new space area.
We call ""scavenge"" the operation of recovering space in the new space only.
The old space is managed by a compacting garbage collector.
This garbage collector is slower and run less often than the scavenger but the new space is also much smaller than the old space.

Note that when saving the image, only the old space is saved. 

In Pharo, the __TimeProfiler__ tool can report on memory usage metrics and GCs passes. 
For example, the execution of this expression:

[[[
[ 10000 timesRepeat: [ Object new ] ] timeProfile
]]]

produces this report:

[[[
**Memory**
	old			+0 bytes
	young		-4,956,688 bytes
	used		-4,956,688 bytes
	free		+4,956,688 bytes
]]]

It means that only young space has been used and freed.
It is obvious because no references to these newly created objects have been stored.

!!! APIs

The VM has two different APIs to manipulate the memory: one that will fail if there is no memory and the other one that will execute a scavenge or a full-GC if needed.

!!!The New Space

The new space is divided into three areas (cf. Figure *@youngSpace*): Eden (5/7 of the new space) and two other areas (1/7 of the new space each) that alternatively play the role of past and future space.
The VM always allocate new objects into the Eden space.

+The New Space Structure>figures/youngSpace.pdf|width=100|label=youngSpace+