!!The Free List

When a new object should be allocated, the VM checks first if there is an object of the given size that can be used. 
Else it allocates a new object by "cutting" and splitting a large free object. 


!!! Free cells in memory

The free list is a structure that keeps information about the memory that can be used to allocate objects.
It refers to free cells (which are special object tagged as Free class).
The minimum size of a free cell is two words: one for the object header and the next. 
Such minimal cells are used to allocate an object with one single slots (because one slot is for the header and the second one is for the slot).

The free cells stays in the memory where they are allocated as shown in Figure *@freeListMemory*.
In Figure *@freeListMemory*, there are two  objects of size 5 word is free. Such objects are structured in a linked-list of objects of the same size. A free cell is an element of a linked-list.
The first object then points to the next free object of the same size. The second object is the last one of this size so its next slot is empty. In addition when the size allows it, the free object has a previous pointer in addition to the next one (implementing a double linked list).

+Free cells of size 5 in the memory.>figures/freeListMemory.pdf|width=100|label=freeListMemory+


!!! Free list

The free list is an object (a datastructure) that keeps tracks of free object based on their size. 
On 64 bits it has 63 slots to keep a free cells.  