!! Understanding Object Structure


!!! About the Spur memory model

The Spur memory model has been designed by E. Miranda . Its design is made to work on both on 32 and 64 bits. 

| Architecture | 1 word size | Bytes | Header size | Alignment
| 32 bits | 32 Bits | 4 bytes | 64 bits | 32 bits |
| 64 bits | 64 Bits | 8 bytes | 64 bits | 64 bits |

In both 32 and 64 bits, every object is 64 bits aligned. However, the object pointer representation is different.

!!!! About alignment

The fact that object addresses are all aligned either on 32 bits or 64 bits (on 64 bits architecture) is an important fact. Indeed some bits are not used to address objects so that they can be used to encode extra information. 

For example, when a word is 32bits (i.e., 4 bytes) all the addresses are multiple of 4. It means that the last two bits are always zero.

[[[
4 storeStringBase: 2.
>>>  '2r100'
4*17879 storeStringBase: 2.
>>> '2r10001011101011100'
]]]

The virtual machine uses these two bits to encode immediate objects (objects whose value is encoded inside the pointer itself) as we present below.

The fact that objects are aligned as also some consequences for objects 
whose size is smaller than a word.
For example, a byteString with 17 characters will be composed of a header 
and the 17 characters will be allocated in the following bytes. The next object 
will not be directly after the characters but on the next multiple of 4.


!!! Immediate objects

Immediate objects are objects directly encoded in the pointer to the object it points to. In 32 bits, immediate objects are SmallIntegers and Characters (see Figure *@32bitsimm*). It means that String accessing low-level operation such as ==at:== and ==at:put:== are faster since there is not Character instance creation (==at:put:==) or extra referencing (==at:==).

In 64 bits, immediate objects are SmallIntegers, Characters and SmallFloats (see Figure *@64bitsimm*).
This is possible since objects are aligned on 64 bits (8 bytes).

+32 bits immediate objects.>figures/32bitsImmediate.pdf|width=100|label=32bitsimm+


+64 bits immediate objects.>figures/64bitsImmediate.pdf|width=100|label=64bitsimm+

!!!! The case of SmallFloat

Figure *@64bitsfloatimm* shows the structure of SmallFloat. 

+64 bits immediate objects.>figures/64bitsFloatImmediate.pdf|width=100|label=64bitsfloatimm+

!!! Object Header

+Object Structure>figures/ObjectHeader.pdf|width=100+

In memory, some memory location contain information representing objects. 
Such location coded on 64 bits describes the 

The object format is given that the 5 bits (in pink) on the object header. 

- 0 : 0 sized object - nil, true, false
- 1 : fixed sized object with instance variables - Point
- 2 : variable sized object with no instance variables - Array
- 3 : variable sized objects with instance variables - MethodContext
- 4 : weak variable sized objects  - WeakArray
- 5 : weak fixed sized objects with instance variables - Ephemeron
- 6, 7, 8 : unused
- 9 : 64 bits indexable
- 10-11 : 32 bits indexable


!!! Resources

- Spur *http://www.mirandabanda.org/cogblog/2013/09/05/a-spur-gear-for-cog/*
- *https://clementbera.wordpress.com/category/spur/*
- *https://clementbera.wordpress.com/2018/11/09/64-bits-immediate-floats/*
- *https://clementbera.wordpress.com/2014/01/16/spurs-new-object-format/*
- *https://clementbera.wordpress.com/2014/02/06/7-points-summary-of-the-spur-memory-manager/*
- *http://www.mirandabanda.org/cogblog/category/spur/page/3/*